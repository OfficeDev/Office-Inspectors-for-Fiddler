name: $(Year:yy).0.$(date:yy)$(DayOfYear)$(rev:.rr)

trigger: none
pr: none

pool:
  name: Azure Pipelines
  vmImage: 'windows-latest'
  demands:
  - msbuild
  - visualstudio
  - vstest

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - checkout: self
      clean: true

    - task: NuGetCommand@2
      displayName: NuGet restore

    - powershell: |
        # Define the URL for the .NET Framework 4.6.1 Developer Pack installer
        $DotNetInstallerUrl = "https://go.microsoft.com/fwlink/?linkid=2099470"

        # Define the path where you want to save the installer
        $DotNetInstallerPath = "$env:USERPROFILE\Downloads\NDP461-DevPack-KB3105179-ENU.exe"

        # Log that the download process is starting
        Write-Host "Downloading .NET Framework 4.6.1 Developer Pack installer from $DotNetInstallerUrl..."

        # Download the .NET Framework 4.6.1 Developer Pack
        Invoke-WebRequest -Uri $DotNetInstallerUrl -OutFile $DotNetInstallerPath

        # Check if the download was successful
        if (Test-Path $DotNetInstallerPath) {
            Write-Host ".NET Framework 4.6.1 Developer Pack installer downloaded successfully to $DotNetInstallerPath."
        } else {
            Write-Host "Failed to download .NET Framework 4.6.1 Developer Pack installer."
            exit 1
        }

        # Log that the installation process is starting
        Write-Host "Installing .NET Framework 4.6.1 Developer Pack silently..."

        # Install the .NET Framework 4.6.1 Developer Pack silently
        Start-Process -FilePath $DotNetInstallerPath -ArgumentList "/q" -Wait

        # Log that the installation process is complete
        Write-Host ".NET Framework 4.6.1 Developer Pack installation completed."
      displayName: 'Install .NET Framework 4.6.1 Developer Pack'

    - powershell: |
        # Define the URL for the Fiddler installer (check for the latest version on the Telerik website)
        $FiddlerInstallerUrl = "https://telerik-fiddler.s3.amazonaws.com/fiddler/FiddlerSetup.exe"

        # Define the path where you want to save the installer
        $InstallerPath = "$env:USERPROFILE\Downloads\FiddlerSetup.exe"

        # Log that the download process is starting
        Write-Host "Downloading Fiddler installer from $FiddlerInstallerUrl..."

        # Download Fiddler installer
        Invoke-WebRequest -Uri $FiddlerInstallerUrl -OutFile $InstallerPath

        # Check if the download was successful
        if (Test-Path $InstallerPath) {
            Write-Host "Fiddler installer downloaded successfully to $InstallerPath."
        } else {
            Write-Host "Failed to download Fiddler installer."
            exit 1
        }

        # Log that the installation process is starting
        Write-Host "Installing Fiddler silently..."

        # Install Fiddler silently
        Start-Process -FilePath $InstallerPath -ArgumentList "/S" -Wait

        # Log that the installation process is complete
        Write-Host "Fiddler installation completed."
      displayName: 'Install Fiddler'

    - task: VSBuild@1
      displayName: Build
      inputs:
        solution: '**/*.sln'
        vsVersion: latest
        configuration: "Release"
        clean: true
        maximumCpuCount: true
        msbuildArchitecture: x64
        createLogFile: true

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\bin'
        Contents: |
          **\MAPIFiddlerInspector.dll
          **\MAPIFiddlerInspector.pdb
        TargetFolder: '$(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        OverWrite: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'

- stage: Release
  jobs:
  - job: Sign
    steps:
    - checkout: self
      clean: true
      submodules: recursive

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: UseDotNet@2
      displayName: 'Install .NetCore 2.x'
      inputs:
        version: '2.x'

    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
      displayName: 'ESRP CodeSigning'
      inputs:
        ConnectedServiceName: 'ESRP CodeSigning Service connection'
        FolderPath: '$(System.ArtifactsDirectory)/drop'
        Pattern: '*.exe'
        signConfigType: inlineSignParams
        inlineOperation: |
          [
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolSign",
                      "Parameters" : {
                          "OpusName" : "Microsoft",
                          "OpusInfo" : "http://www.microsoft.com",
                          "FileDigest" : "/fd \"SHA256\"",
                          "PageHash" : "/NPH",
                          "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                      },
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  },
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolVerify",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  }
              ]

    # - task: ArchiveFiles@2
    #   inputs:
    #     rootFolderOrFile: '$(System.ArtifactsDirectory)/drop/Win32/MrMAPI/Release_Unicode/MrMAPI.exe'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/MrMAPI.exe.$(Build.BuildNumber).zip'

    # - task: GitHubRelease@1
    #   inputs:
    #     gitHubConnection: 'stephenegriffin'
    #     repositoryName: '$(Build.Repository.Name)'
    #     action: 'create'
    #     target: '$(Build.SourceVersion)'
    #     tagSource: 'userSpecifiedTag'
    #     tag: '$(Build.BuildNumber)'
    #     title: ${{ parameters.title }} ($(Build.BuildNumber))
    #     releaseNotesSource: 'inline'
    #     releaseNotesInline: |-
    #       Build: *$(Build.BuildNumber)*

    #       ${{ parameters.description }}
    #       If you just want to run MFCMAPI or MrMAPI, get the executables (exe). If you want to debug them, get the symbol files (pdb).

    #       *The 64 bit builds will only work on a machine with 64 bit Outlook installed. All other machines should use the 32 bit builds, regardless of the operating system.*

    #       [![Facebook Badge](http://badge.facebook.com/badge/26764016480.2776.1538253884.png)](http://www.facebook.com/MFCMAPI)
    #       [Download stats](https://hanadigital.github.io/grev/?user=stephenegriffin&repo=mfcmapi)
    #     isDraft: true
    #     isPreRelease: ${{ parameters.prerelease }}
    #     changeLogCompareToRelease: 'lastFullRelease'
    #     changeLogType: 'issueBased'
    #     assets: |
    #       $(Build.ArtifactStagingDirectory)/*.zip
